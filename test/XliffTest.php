<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-08-24 at 13:15:08.
 */
class XliffTest
    extends PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require_once(__DIR__ . '/../src/system/modules/xliff/XliffHelper.php');
        require_once(__DIR__ . '/../src/system/modules/xliff/Xliff.php');
        require_once(__DIR__ . '/TestXliffHelper.php');
    }

    /**
     * @covers Xliff::parseXliff
     * @todo   Implement testParseXliff().
     */
    public function testParseXliff()
    {
        $xliff = new Xliff();

        $arrInput  = array();
        $arrOutput = $xliff->parseXliff(__DIR__ . '/german.xliff',
                                        $arrInput);

        $this->assertEquals(array('hello' => array('hello' => 'Hallo Welt!')),
                            $arrInput);
        $this->assertEquals(array('hello' => array('hello' => 'Hallo Welt!')),
                            $arrOutput);

        $arrInput  = array();
        $arrOutput = $xliff->parseXliff(__DIR__ . '/english.xliff',
                                        $arrInput);

        $this->assertEquals(array('hello' => array('hello' => 'Hello World!')),
                            $arrInput);
        $this->assertEquals(array('hello' => array('hello' => 'Hello World!')),
                            $arrOutput);
    }

    /**
     * @covers Xliff::generateXliff
     * @todo   Implement testGenerateXliff().
     */
    public function testGenerateXliff()
    {
        $xliff = new Xliff(new TestXliffHelper());

        // load german.xliff
        $german = new DOMDocument();
        $german->load(__DIR__ . '/german.xliff');

        // load german.xliff
        $english = new DOMDocument();
        $english->load(__DIR__ . '/english.xliff');

        // generate the document english to german
        $doc = $xliff->generateXliff('hello',
                                     'en',
                                     'de');
        // test the result
        $this->assertEqualXMLStructure($german->documentElement,
                                       $doc->documentElement,
                                       true);

        // generate the document german to english
        $doc = $xliff->generateXliff('hello',
                                     'de',
                                     'en');
        // test the result
        $this->assertEqualXMLStructure($english->documentElement,
                                       $doc->documentElement,
                                       true);
    }

    /**
     * @covers Xliff::generateXliff
     * @todo   Implement testGenerateXliff().
     */
    public function testGenerateXliffWithHelperArgument()
    {
        $helper = new TestXliffHelper();
        $xliff  = new Xliff();

        // load german.xliff
        $german = new DOMDocument();
        $german->load(__DIR__ . '/german.xliff');

        // load german.xliff
        $english = new DOMDocument();
        $english->load(__DIR__ . '/english.xliff');

        // generate the document english to german
        $doc = $xliff->generateXliff('hello',
                                     'en',
                                     'de',
                                     $helper);
        // test the result
        $this->assertEqualXMLStructure($german->documentElement,
                                       $doc->documentElement,
                                       true);

        // generate the document german to english
        $doc = $xliff->generateXliff('hello',
                                     'de',
                                     'en',
                                     $helper);
        // test the result
        $this->assertEqualXMLStructure($english->documentElement,
                                       $doc->documentElement,
                                       true);
    }

    /**
     * @covers Xliff::generateXliff
     * @todo   Implement testGenerateXliff().
     */
    public function testGenerateXliffWithoutHelper()
    {
        $xliff = new Xliff();

        // generate the document english to german
        try {
            $xliff->generateXliff('hello',
                                  'en',
                                  'de');
            $this->fail();
        }
        catch (Exception $e) {
        }

        // generate the document german to english
        try {
            $xliff->generateXliff('hello',
                                  'de',
                                  'en');
            $this->fail();
        }
        catch (Exception $e) {
        }
    }
}
